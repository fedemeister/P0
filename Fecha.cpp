//
// Created by fedemeister on 14/03/18.
//

#include <cstdio>
#include <ctime>
#include <iostream>
#include "Fecha.hpp"

Fecha::Fecha(int dia, int mes, int anyo) : day_(dia), month_(mes), year_(anyo) {
    time_t tiempoCalendario = time(nullptr);
    tm *tiempoDescompuesto = localtime(&tiempoCalendario);

    if (dia == 0) day_ = tiempoDescompuesto->tm_mday;   // dia de la fecha del sistema
    if (mes == 0) month_ = tiempoDescompuesto->tm_mon + 1;  // mes de la fecha del sistema
    if (anyo == 0) year_ = tiempoDescompuesto->tm_year + 1900;  // año de la fecha del sistema

    fechaValida();
}

// A partir de una cadena de caracteres de bajo nivel en el formato "dd/mm/aaaa"
Fecha::Fecha(const char *cad_fecha) {
    if (sscanf(cad_fecha, "%d/%d/%d", &day_, &month_, &year_) != 3) //3 xq debe hacer 3 asignaciones
        throw (Invalida("Fecha Invalida a partir de una cadena de caracteres"));
        //Parte la cadena y se almacena en cada variable correspondiente
    else
        *this = Fecha(day_, month_, year_);
}


void Fecha::fechaValida() const {   // revisar
    tm f = {};
    f.tm_mday = day_;
    f.tm_mon = month_ - 1;
    f.tm_year = year_ - 1900;
    f.tm_isdst = -1;
    mktime(&f);

    if (day_ != f.tm_mday) throw Invalida("El dia no es valido\n");
    if (month_ != f.tm_mon + 1) throw Invalida("El mes no es valido\n");
    if (year_ != f.tm_year + 1900) throw Invalida("El año no es valido\n");

    if (year_ < AnnoMinimo || year_ > AnnoMaximo)
        throw Invalida("Año fuera de rango");
}


//GETTERS GENERATED BY CLION
int Fecha::getDay() const {
    return day_;
}

int Fecha::getMonth() const {
    return month_;
}

int Fecha::getYear() const {
    return year_;
}

Fecha &Fecha::operator+=(int numDias) {
    return <#initializer#>;
}

Fecha &Fecha::operator-=(int numDias) {
    return <#initializer#>;
}

Fecha &Fecha::operator++() {
    return (*this += 1);
}

Fecha &Fecha::operator--() {
    return (*this -= 1);
}

Fecha Fecha::operator++(int numDias) {
    Fecha fechaAuxiliar(*this);
    *this += 1;
    return fechaAuxiliar;
}

Fecha Fecha::operator--(int numDias) {
    Fecha fechaAuxiliar(*this);
    *this -= 1;
    return fechaAuxiliar;
}

Fecha Fecha::operator+(int numDias) const {
    Fecha auxiliar(*this);

    return (auxiliar += numDias);
}

Fecha Fecha::operator-(int numDias) const {
    return Fecha();
}

bool Fecha::esBisiesto(int year) const {
    bool siBisiesto = true;     // devuelve TRUE si es bisiesto
    bool noBisiesto = false;    // devuelve FALSE si NO es bisiesto
    (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) ? siBisiesto : noBisiesto;
}


// Operadores de comparacion --> fuera de la clase
bool operator==(const Fecha &fecha1, const Fecha &fecha2) {
    return false;
}

bool operator!=(const Fecha &fecha1, const Fecha &fecha2) {
    return false;
}

bool operator>(const Fecha &fecha1, const Fecha &fecha2) {
    return false;
}

bool operator<(const Fecha &fecha1, const Fecha &fecha2) {
    return false;
}

bool operator>=(const Fecha &fecha1, const Fecha &fecha2) {
    return false;
}

bool operator<=(const Fecha &fecha1, const Fecha &fecha2) {
    return false;
}
